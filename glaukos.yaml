---
prometheus:
  defaultNamespace: xmidt
  defaultSubsystem: glaukos
  constLabels:
    development: "true"

log:
  file: stdout
  level: DEBUG

health:
  disableLogging: false
  custom:
    server: development

servers:
  primary:
    address: :4200
    disableHTTPKeepAlives: true
    header:
      X-Xmidt-Server:
        - glaukos
      X-Xmidt-Version:
        - development
  metrics:
    address: :4201
    disableHTTPKeepAlives: true
    header:
      X-Xmidt-Server:
        - glaukos
      X-Xmidt-Version:
        - development

  health:
    address: :4202
    disableHTTPKeepAlives: true
    header:
      X-Xmidt-Server:
        - glaukos
      X-Xmidt-Version:
        - development

########################################
#   Authorization Related Configuration
########################################

# secret contains information for finding the secret on incoming requests.  If
# both header and webhook secret are empty, no authentication is done on
# incoming requests to Glaukos.  Otherwise, the value at the header provided
# should hold a sha1 hash of the request body.  It should be in the format:
#
# Sha1<delimiter><hash>
#
# (Optional)
secret:
  # header provides the header key where the hash is expected.
  # (Optional)
  header: "X-Webpa-Signature"

  # delimiter provides the string that is expected between "Sha1" and the hash.
  # (Optional)
  delimiter: "="

########################################
#   Webhook Registration Related Configuration
########################################

# webhook provides the information needed to register to a webhook.  If the
# urls and event regex aren't empty and the interval is greater than 0,
# registration occurs.
# (Optional)
webhook:
  # registrationInterval provides the time to wait between each registration to
  # the webhook.  If this is set to 0, no registration is done.
  # (Optional)
  registrationInterval: "4m"

  # timeout provides the length of time the request should wait before timing
  # out.
  timeout: "1m"

  # registrationURL provides the place to register the webhook.
  registrationURL: "http://caduceus:6000/hook"

  # request provides the information passed in the webhook registration request.
  request:
    # config provides configuration values for the requests to the webhook
    # receiver.
    config:
      # url provides the server the webhook should send the events to.  If this
      # value isn't set, no registration happens.
      url: "http://glaukos:4200/api/v1/events"

      # contentType provides the content type Glaukos expects from the requests
      # it receives.
      # (Optional) defaults to "wrp"
      #contentType: "wrp"

      # secret provides the key for hashing the messages the webhook sends.
      # If this is empty, no authentication is done later for incoming requests
      # to Glaukos.
      # (Optional)
      secret: "super secret"

      # maxRetryCount is the number of times to retry on a failure.
      # (Optional)
      maxRetryCount: 1

      # alternativeURLs provides endpoints to round robin through on a failure
      # to send an event.  This is only used if the maxRetryCount is greater
      # than 0.
      # (Optional)
      #AlternativeURLs: []

    # events provides a list of regular expressions that tells the webhook
    # which endpoints to send to Glaukos.  If the destination of an event
    # matches a regular expression in this list, it is sent to Glaukos
    events: ["device-status.*"]

    # matcher provides regular expressions to match against the event source.
    # (Optional) default is [".*"]
    # matcher:
    #   deviceID: [".*"]

  # the below configuration values provide a way to add an Authorization header
  # to the request to the webhook.  If both basic and sat contain empty values,
  # no header is sent.  sat takes priority over basic if both are set.

  # basic provides a way to use Basic Authorization when registering to a
  # webhook.  If this value is provided and sat isn't, the following header is
  # added to the registration request:
  #
  # Authorization Basic {basic}
  #
  # (Optional)
  basic: "Basic dXNlcjpwYXNz"

  # jwt provides a way to use Bearer Authorization when registering to a
  # webhook.  If the below values are all provided, a request is made to the
  # URL to get the token to be used in the registration request.  The
  # header would look like:
  #
  # Authorization Bearer {token}
  #
  # (Optional)
  # jwt:
  # requestHeaders are added to the request for the token.
  # (Optional)
  # requestHeaders:
  #   "": ""
  # authURL is the URL to access for the token.
  # authURL: ""
  # timeout is how long the request to get the token will take before
  # timing out.
  # timeout: "1m"
  # buffer is the length of time before a token expires to get a new token.
  # (Optional)
  # buffer: "5s"

codex:
  address: localhost:7000
  auth:
    # basic provides a way to use Basic Authorization when registering to a
    # webhook.  If this value is provided and sat isn't, the following header is
    # added to the registration request:
    #
    # Authorization Basic {basic}
    #
    # (Optional)
    basic: ""

    # jwt provides a way to use Bearer Authorization when registering to a
    # webhook.  If the below values are all provided, a request is made to the
    # URL to get the token to be used in the registration request.  The
    # header would look like:
    #
    # Authorization Bearer {token}
    #
    # (Optional)
    jwt:
      # requestHeaders are added to the request for the token.
      # (Optional)
      # requestHeaders:
      #   "": ""

      # authURL is the URL to access for the token.
      authURL: ""

      # timeout is how long the request to get the token will take before
      # timing out.
      timeout: "1m"

      # buffer is the length of time before a token expires to get a new token.
      # (Optional)
      buffer: "5s"

queue:
  # queueSize provides the maximum number of events that can be added to the
  # queue.  Once events are taken off the queue, they are parsed for metrics.
  # If a value below 5 is chosen, it defaults to 5.
  # (Optional) defaults to 5
  queueSize: 5
  # maxWorkers provides the maximum number of workers parsing events at a
  # time.  If a value below 5 is chosen, it defaults to 5.
  # (Optional) defaults to 5
  maxWorkers: 5
