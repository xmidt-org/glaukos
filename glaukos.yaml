---
prometheus:
  defaultNamespace: xmidt
  defaultSubsystem: glaukos
  constLabels:
    development: "true"

log:
  file: stdout
  level: DEBUG

health:
  disableLogging: false
  custom:
    server: development

servers:
  primary:
    address: :4200
    disableHTTPKeepAlives: true
    header:
      X-Xmidt-Server:
        - glaukos
      X-Xmidt-Version:
        - development
  metrics:
    address: :4201
    disableHTTPKeepAlives: true
    header:
      X-Xmidt-Server:
        - glaukos
      X-Xmidt-Version:
        - development

  health:
    address: :4202
    disableHTTPKeepAlives: true
    header:
      X-Xmidt-Server:
        - glaukos
      X-Xmidt-Version:
        - development

########################################
#   Authorization Related Configuration
########################################

# secret contains information for finding the secret on incoming requests.  If
# both header and webhook secret are empty, no authentication is done on
# incoming requests to Glaukos.  Otherwise, the value at the header provided
# should hold a sha1 hash of the request body.  It should be in the format:
#
# Sha1<delimiter><hash>
#
# (Optional)
secret:
  # header provides the header key where the hash is expected.
  # (Optional)
  header: "X-Webpa-Signature"

  # delimiter provides the string that is expected between "Sha1" and the hash.
  # (Optional)
  delimiter: "="

########################################
#   Webhook Registration Related Configuration
########################################

# webhook provides the information needed to register to a webhook.  If the
# urls and event regex aren't empty and the interval is greater than 0,
# registration occurs.
# (Optional)
webhook:
  # registrationInterval provides the time to wait between each registration to
  # the webhook.  If this is set to 0, no registration is done.
  # (Optional)
  registrationInterval: "4m"

  # timeout provides the length of time the request should wait before timing
  # out.
  timeout: "1m"

  # registrationURL provides the place to register the webhook.
  registrationURL: "http://caduceus:6000/hook"

  # request provides the information passed in the webhook registration request.
  request:
    # config provides configuration values for the requests to the webhook
    # receiver.
    config:
      # url provides the server the webhook should send the events to.  If this
      # value isn't set, no registration happens.
      url: "http://glaukos:4200/api/v1/events"

      # contentType provides the content type Glaukos expects from the requests
      # it receives.
      # (Optional) defaults to "wrp"
      #contentType: "wrp"

      # secret provides the key for hashing the messages the webhook sends.
      # If this is empty, no authentication is done later for incoming requests
      # to Glaukos.
      # (Optional)
      secret: "super secret"

      # maxRetryCount is the number of times to retry on a failure.
      # (Optional)
      maxRetryCount: 1

      # alternativeURLs provides endpoints to round robin through on a failure
      # to send an event.  This is only used if the maxRetryCount is greater
      # than 0.
      # (Optional)
      #AlternativeURLs: []

    # events provides a list of regular expressions that tells the webhook
    # which endpoints to send to Glaukos.  If the destination of an event
    # matches a regular expression in this list, it is sent to Glaukos
    events: ["device-status.*"]

    # matcher provides regular expressions to match against the event source.
    # (Optional) default is [".*"]
    # matcher:
    #   deviceID: [".*"]

  # the below configuration values provide a way to add an Authorization header
  # to the request to the webhook.  If both basic and sat contain empty values,
  # no header is sent.  sat takes priority over basic if both are set.

  # basic provides a way to use Basic Authorization when registering to a
  # webhook.  If this value is provided and sat isn't, the following header is
  # added to the registration request:
  #
  # Authorization Basic {basic}
  #
  # (Optional)
  basic: "Basic dXNlcjpwYXNz"

  # jwt provides a way to use Bearer Authorization when registering to a
  # webhook.  If the below values are all provided, a request is made to the
  # URL to get the token to be used in the registration request.  The
  # header would look like:
  #
  # Authorization Bearer {token}
  #
  # (Optional)
  # jwt:
  # requestHeaders are added to the request for the token.
  # (Optional)
  # requestHeaders:
  #   "": ""
  # authURL is the URL to access for the token.
  # authURL: ""
  # timeout is how long the request to get the token will take before
  # timing out.
  # timeout: "1m"
  # buffer is the length of time before a token expires to get a new token.
  # (Optional)
  # buffer: "5s"

codex:
  address: localhost:7000
  # maxRetryCount is the max number of retries when making the request to codex. Retries will be sent every 30 seconds.
  maxRetryCount: 0
  rateLimit:
    # requests is the max number of requests per duration that glaukos should send to codex. If this is 0, then requests
    # are not rate-limited.
    requests: 1
    # tick configures the limits for the time window of the rate limiter.
    tick: "1s"
  # circuit breaker settings
  circuitBreaker:
    # The maximum number of requests allowed to pass through when the CircuitBreaker is half-open.
    # If MaxRequests is 0, CircuitBreaker allows only 1 request.
    maxRequests: 0
    # the cyclic period of the closed state for CircuitBreaker to clear the internal Counts.
    # If Interval is 0, CircuitBreaker doesn't clear the internal Counts during the closed state.
    interval: "2m"

    # Timeout is the period of the open state, after which the state of CircuitBreaker becomes half-open.
    # If Timeout is 0, the timeout value of CircuitBreaker is set to 60 seconds.
    timeout: "1m"

    # Number of consecutive failures allowed per interval before circuit breaker switches to open state.
    # Must be at least 1
    consecutiveFailuresAllowed: 1

  auth:
    # basic provides a way to use Basic Authorization when registering to a
    # webhook.  If this value is provided and sat isn't, the following header is
    # added to the registration request:
    #
    # Authorization Basic {basic}
    #
    # (Optional)
    basic: ""

    # jwt provides a way to use Bearer Authorization when registering to a
    # webhook.  If the below values are all provided, a request is made to the
    # URL to get the token to be used in the registration request.  The
    # header would look like:
    #
    # Authorization Bearer {token}
    #
    # (Optional)
    jwt:
      # requestHeaders are added to the request for the token.
      # (Optional)
      # requestHeaders:
      #   "": ""

      # authURL is the URL to access for the token.
      authURL: ""

      # timeout is how long the request to get the token will take before
      # timing out.
      timeout: "1m"

      # buffer is the length of time before a token expires to get a new token.
      # (Optional)
      buffer: "5s"

queue:
  # queueSize provides the maximum number of events that can be added to the
  # queue.  Once events are taken off the queue, they are parsed for metrics.
  # If a value below 5 is chosen, it defaults to 5.
  # (Optional) defaults to 5
  queueSize: 5
  # maxWorkers provides the maximum number of workers parsing events at a
  # time.  If a value below 5 is chosen, it defaults to 5.
  # (Optional) defaults to 5
  maxWorkers: 5

# eventMetrics deals with various settings for parsers used to parse metrics from incoming events
eventMetrics:
  # birthdateValidFrom is a negative time duration used when checking if an incoming event's birthdate is valid or not.
  # A birthdate is deemed valid if it is between (current time - birthdateValidFrom) and (current time + birthdateValidTo).
  # If a birthdate is deemed invalid, it will be replaced with the current time.
  birthdateValidFrom: "-12h"
  # birthdateValidTo is a positive time duration used when checking if an incoming event's birthdate is valid or not.
  # A birthdate is deemed valid if it is between (current time - birthdateValidFrom) and (current time + birthdateValidTo).
  # If a birthdate is deemed invalid, it will be replaced with the current time.
  birthdateValidTo: "1h"

# timeElapsedParsers details the configuration for all of the time-elapsed parsers
timeElapsedParsers:
  # defaultValidFrom is the default past time duration used to validate timestamps if one is not provided
  # in the specific event config. If omitted, this will default to -1h.
  defaultValidFrom: "-2h"
  # parsers contains the list of configurations for each time elapsed parser
  parsers:
    # # name (required) is the name of the parser. The eventual name will have the format TEP_<name>. If multiple
    # # time-elapsed parsers have the same name, an error will be thrown when starting the application.
    # - name: ""
    #   # incomingEvent (required) contains the event configuration for the event received from caduceus.
    #   # This event triggers the glaukos calculations.
    #   incomingEvent:
    #       # regex is the regex string for the event destination. This must be a valid regex.
    #       regex: ""
    #       # calculateUsing (optional) is a string that tells glaukos where to find the timestamp to use in the calculations.
    #       # The options are "birthdate" or "boot-time". If omitted, the default is "birthdate".
    #       calculateUsing: ""
    #       # validFrom (optional) is the past time duration used to validate timestamps. If omitted, it will default
    #       # to the duration provided in defaultValidFrom.
    #       validFrom: "-2h"
    #   # searchedEvent (optional) contains the event configuration for the event to look for in the device's history.
    #   # If this is omitted, glaukos understands that all calculations should be done with the incoming event,
    #   # which amounts to incomingEvent's birthdate - incomingEvent's boot-time.
    #   searchedEvent:
    #     regex: ""
    #     calculateUsing: ""
    #     validFrom: ""
    #   # searchedSession is the session to use when searching for the searchedEvent in the device's history.
    #   # This options are "previous" and "current". If omitted, it defaults to "previous". This field is disregarded
    #   # if searchedEvent is left blank.
    #   searchedSession: "previous"
    - name: "boot_to_online"
      incomingEvent:
        regex: ".*/online$"
        calculateUsing: "birthdate"
    - name: "boot_to_operational"
      incomingEvent:
        regex: ".*/operational/"
        calculateUsing: "birthdate"
    - name: "boot_to_manageable"
      incomingEvent:
        regex: ".*/fully-manageable/"
        calculateUsing: "birthdate"
    - name: "reboot_to_manageable"
      incomingEvent:
        regex: ".*/fully-manageable/"
        calculateUsing: "birthdate"
      searchedEvent:
        regex: ".*/reboot-pending/.*"
        calculateUsing: "birthdate"
      searchedSession: "previous"
